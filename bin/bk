#!/usr/bin/perl
use strict;
use warnings;
use feature "say";
use File::Copy;
use File::Copy::Recursive qw(rcopy rmove);
use Getopt::Std;

my $EXT = '.bak';

sub HELP_MESSAGE {
    print <<"HELP";
Usage: $0 FILE
Rename FILE to FILE$EXT
If FILE$EXT exists, will append a number

The `-u` flag will undo the backup and restore
from that backup.

  -h                           display this help
  -i                           prompt before overwrite
  -r                           copy directories recursively
  -u                           restore a backup file
  -v                           explain what is being done
HELP
    exit;
}

sub confirm {
    print "$_[0] ";

    chomp($_ = <STDIN>);

    /y/i;
}

sub bk {
    my $file = shift;
    my $opts = shift;

    my $new_name = $file . $EXT;
    my $number = 1;

    while (-e $new_name) {
        $new_name = $file . $EXT;
        $new_name = "$new_name.$number";
        $number++;
    }

    if ($opts->{v}) {
        say "'$file' -> '$new_name'";
    }

    my $r;

    if ($opts->{r}) {
        $r = rcopy $file, $new_name;
    } else {
        $r = copy $file, $new_name;
    }

    if (not $r) {
        warn "$0: error backing up '$file': $!\n";
        return
    }
}

sub unbk {
    my $file = shift;
    my $opts = shift;

    my $backup_suffix = '\.bak(\.\d+)?$';

    if ($file !~ /$backup_suffix/) {
        warn "$0: '$file' is not a backup file\n";
        return;
    }

    (my $original_file = $file) =~ s/$backup_suffix//;

    if ($opts->{v}) {
        say "'$file' -> '$original_file'";
    }

    if (-f $original_file and $opts->{i} and
        not confirm "$0: overwrite '$file'?") {

        return;
    }

    my $r = rmove $file, $original_file;

    if (not $r) {
        warn "$0: error restoring '$file': $!\n";
        return;
    }
}

my %opts;
getopts("hiruv", \%opts);

if (not @ARGV or $opts{h}) {
    HELP_MESSAGE();
}

for my $file (@ARGV) {
    if (not -e $file) {
        warn "$0: cannot stat '$file': No such file or directory\n";
        next;
    }

    if (not $opts{r} and -d $file) {
        warn "$0: omitting directory '$file'\n";
        next;
    }

    if ($opts{u}) {
        unbk $file, \%opts;
    } else {
        bk $file, \%opts;
    }
}
